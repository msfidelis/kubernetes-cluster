- hosts: tag_Workload_kubernetes
  become: yes
  tasks:
    - name: Get Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    # Note: currently the latest repository is still xenial not bionic
    - name: Add Kubernetes APT repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: "kubernetes"

    # Install packages
    - name: Install required packages
      apt:
        name: "{{ packages }}"
        update_cache: true
        state: present
      vars:
        packages:
          - docker.io
          - kubelet
          - kubeadm

    # Docker service is disabled by default
    - name: enable Docker service
      systemd:
        name: docker
        enabled: yes

- hosts: tag_Role_master
  become: yes
  tasks:

    - name: change master hostname 
      hostname:
        name: "cluster-master"

    - name: Initialize Cluster
      shell: kubeadm init --pod-network-cidr 10.244.0.0/16 --ignore-preflight-errors=NumCPU >> cluster_init.log
      args:
        chdir: $HOME
        creates: cluster_init.log

    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory
        owner: root
        group: root
        mode: 0775

    - name: Copy default cluster configuration
      shell: cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      args:
        chdir: $HOME
        creates: $HOME/.kube/config

    - name: change permissions
      shell: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Setup Flannel. Use log to prevent second installation
      shell: kubectl -n kube-system apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml >> flannel_setup.log
      args:
        chdir: $HOME
        creates: flannel_setup.log

    - name: Create token to join cluster
      shell: kubeadm token create --print-join-command
      register: join_command_raw
    - debug: msg="join command is {{ join_command_raw.stdout }}"

    - name: Set join command as fact
      set_fact: join_command="{{ join_command_raw.stdout }}"

- hosts: tag_Role_node
  become: yes
  tasks:

    - name: change node hostname 
      hostname:
        name: "cluster-node"

    - name: Join the cluster. Use log to prevent joining twice
      shell: "{{ hostvars[groups['tag_Role_master'][0]]['join_command'] }} >> node_join.log"
      # when: join_command is defined
      args:
        chdir: $HOME
        creates: node
