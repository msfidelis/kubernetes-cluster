- hosts: tag_Workload_kubernetes
  become: yes
  tasks:
    - name: Get Kubernetes apt-key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    # Note: currently the latest repository is still xenial not bionic
    - name: Add Kubernetes APT repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: "kubernetes"

    # Install packages
    - name: Install required packages
      apt:
        name: "{{ packages }}"
        update_cache: true
        state: present
      vars:
        packages:
          - docker.io
          - kubelet
          - kubeadm

    - template:
        src: ./templates/daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: 0775

    - file:
        path: /etc/systemd/system/docker.service.d
        state: directory

    - name: Daemon Reload
      shell: systemctl daemon-reload

    # Docker service is disabled by default
    - name: enable Docker service
      systemd:
        name: docker
        enabled: yes

    - name: Remove swapfile from /etc/fstab
      mount:
        name: swap
        fstype: swap
        state: absent

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

- hosts: tag_Role_master
  become: yes
  tasks:

    - name: Initialize Cluster
      shell: kubeadm init --pod-network-cidr 10.244.0.0/16 --ignore-preflight-errors=NumCPU >> cluster_init.log
      args:
        chdir: $HOME
        creates: cluster_init.log

    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory
        owner: root
        group: root
        mode: 0775

    - name: Copy default cluster configuration
      shell: cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      args:
        chdir: $HOME
        creates: $HOME/.kube/config

    - name: change permissions
      shell: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Setup Flannel. Use log to prevent second installation
      shell: kubectl -n kube-system apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml >> flannel_setup.log
      args:
        chdir: $HOME
        creates: flannel_setup.log

    - name: Create token to join cluster
      shell: kubeadm token create --print-join-command
      register: join_command_raw
    - debug: msg="join command is {{ join_command_raw.stdout }}"

    - name: Set join command as fact
      set_fact: join_command="{{ join_command_raw.stdout }}"

    - name: Pull default images
      shell: kubeadm config images pull
      args:
        chdir: $HOME
        creates: images_pull.log

    - name: Helm - Download helm from source
      shell: wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
      args:
        chdir: $HOME
        creates: helm_download.log

    - name: Helm - Untar Helm package
      shell: tar -xvf helm-v2.13.1-linux-amd64.tar.gz
      args:
        chdir: $HOME
        creates: helm_extract.log

    - name: Helm - Move helm to bin
      shell: mv linux-amd64/helm /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      args:
        chdir: $HOME
        creates: /usr/local/bin/helm

    - name: Helm - Move tiller to bin
      shell: mv linux-amd64/tiller /usr/local/bin/tiller && chmod +x /usr/local/bin/tiller
      args:
        chdir: $HOME
        creates: /usr/local/bin/tiller

    - name: Helm - Init
      shell: helm init
      args:
        chdir: $HOME
        creates: helm_init.log

    - name: Helm - Create Tiller ServiceAccount
      ignore_errors: yes
      shell: kubectl create serviceaccount --namespace=kube-system tiller
      args:
        chdir: $HOME
        creates: tiller_service_account.log

    - name: Helm - Create Tiller Role Binding
      ignore_errors: yes
      shell: kubectl create clusterrolebinding tiller-cluster-role --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
      args:
        chdir: $HOME
        creates: tiller_role_binding.log

    # @Todo: mover para um arquivo de deployment
    - name: Helm - Patch Tiller Deployment
      ignore_errors: yes
      shell: kubectl patch deployments -n kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
      args:
        chdir: $HOME
        creates: tiller_patch_deployment.log

    - name: Istio - Download Istio
      shell: wget https://github.com/istio/istio/releases/download/1.1.3/istio-1.1.3-linux.tar.gz
      args:
        chdir: $HOME
        creates: istio_download.log

    - name: Istio - Untar Istio
      shell: tar xvf istio-1.1.3-linux.tar.gz
      args:
        chdir: $HOME
        creates: istio_untar.log

    - name: Istio - Untar Istio
      shell: tar xvf istio-1.1.3-linux.tar.gz
      args:
        chdir: $HOME
        creates: istio_untar.log

    - name: Istio - Create namespace
      ignore_errors: yes
      shell: kubectl create namespace istio-system
      args:
        chdir: $HOME
        creates: istio_namespace.log

    - name: Helm - Deploy Istio Init with Helm
      ignore_errors: yes
      shell: helm install istio-1.1.3/install/kubernetes/helm/istio-init/ --name istio-init --namespace istio-system
      args:
        chdir: $HOME
        creates: istio_init_deploy.log

    - name: Helm - Install Istio with Helm
      ignore_errors: yes
      shell: helm install istio-1.1.3/install/kubernetes/helm/istio --name istio --namespace istio-system
      args:
        chdir: $HOME
        creates: istio_install.log

- hosts: tag_Role_node
  become: yes
  tasks:

    # - name: change node hostname
    #   hostname:
    #     name: "cluster-node"

    - name: Join the cluster. Use log to prevent joining twice
      shell: "{{ hostvars[groups['tag_Role_master'][0]]['join_command'] }} >> node_join.log"
      # when: join_command is defined
      args:
        chdir: $HOME
        creates: node
